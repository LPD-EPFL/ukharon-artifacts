diff --git a/libhrd/hrd_util.c b/libhrd/hrd_util.c
index 4f67c4e..f511df3 100644
--- a/libhrd/hrd_util.c
+++ b/libhrd/hrd_util.c
@@ -63,9 +63,10 @@ struct ibv_device* hrd_resolve_port_index(struct hrd_ctrl_blk* cb,
   dev_list = ibv_get_device_list(&num_devices);
   CPE(!dev_list, "HRD: Failed to get IB devices list", 0);
 
-  int ports_to_discover = port_index;
   int dev_i;
 
+  printf("HRD: Ignoring the port index and picking the last device");
+
   for (dev_i = 0; dev_i < num_devices; dev_i++) {
     struct ibv_context* ctx = ibv_open_device(dev_list[dev_i]);
     CPE(!ctx, "HRD: Couldn't open device", 0);
@@ -98,7 +99,8 @@ struct ibv_device* hrd_resolve_port_index(struct hrd_ctrl_blk* cb,
         continue;
       }
 
-      if (ports_to_discover == 0) {
+      // Pick the last device
+      if (dev_i == (num_devices - 1) && port_i == device_attr.phys_port_cnt) {
         printf("HRD: port index %d resolved to device %d, port %d\n",
                port_index, dev_i, port_i);
 
@@ -113,8 +115,6 @@ struct ibv_device* hrd_resolve_port_index(struct hrd_ctrl_blk* cb,
 
         return dev_list[cb->device_id];
       }
-
-      ports_to_discover--;
     }
 
     if (ibv_close_device(ctx)) {
@@ -221,36 +221,10 @@ int hrd_free(int shm_key, void* shm_buf) {
   return 0;
 }
 
-/* Like printf, but red. Limited to 1000 characters. */
-void hrd_red_printf(const char* format, ...) {
-#define RED_LIM 1000
+void hrd_red_printf(const char *fmt, ...) {
   va_list args;
-  int i;
-
-  char buf1[RED_LIM], buf2[RED_LIM];
-  memset(buf1, 0, RED_LIM);
-  memset(buf2, 0, RED_LIM);
-
-  va_start(args, format);
-
-  /* Marshal the stuff to print in a buffer */
-  vsnprintf(buf1, RED_LIM, format, args);
-
-  /* Probably a bad check for buffer overflow */
-  for (i = RED_LIM - 1; i >= RED_LIM - 50; i--) {
-    assert(buf1[i] == 0);
-  }
-
-  /* Add markers for red color and reset color */
-  snprintf(buf2, 1000, "\033[31m%s\033[0m", buf1);
-
-  /* Probably another bad check for buffer overflow */
-  for (i = RED_LIM - 1; i >= RED_LIM - 50; i--) {
-    assert(buf2[i] == 0);
-  }
-
-  printf("%s", buf2);
-
+  va_start(args, fmt);
+  vprintf(fmt, args);
   va_end(args);
 }

